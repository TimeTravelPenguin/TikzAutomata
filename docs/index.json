{
  "api/index.html": {
    "href": "api/index.html",
    "title": "PLACEHOLDER | TikzAutonoma",
    "keywords": "PLACEHOLDER TODO: Add .NET projects to the src folder and run docfx to generate REAL API Documentation !"
  },
  "api/TikzAutonoma.Direction.html": {
    "href": "api/TikzAutonoma.Direction.html",
    "title": "Enum Direction | TikzAutonoma",
    "keywords": "Enum Direction Namespace : TikzAutonoma Assembly : TikzAutonoma.dll Syntax [Flags] public enum Direction : byte Fields Name Description Above Below Left None Right"
  },
  "api/TikzAutonoma.EdgeArrow.html": {
    "href": "api/TikzAutonoma.EdgeArrow.html",
    "title": "Enum EdgeArrow | TikzAutonoma",
    "keywords": "Enum EdgeArrow Namespace : TikzAutonoma Assembly : TikzAutonoma.dll Syntax [Flags] public enum EdgeArrow : byte Fields Name Description Both Left None Right"
  },
  "api/TikzAutonoma.html": {
    "href": "api/TikzAutonoma.html",
    "title": "Namespace TikzAutonoma | TikzAutonoma",
    "keywords": "Namespace TikzAutonoma Classes TikzWriter Writer object used to compile objects to Tikz format Interfaces ITikzWritable Interface for objects compilable for Tikz ITikzWriter Interface for object able to compile ITikzWritable objects Enums Direction EdgeArrow TextMode Enum to indicate whether labels should be rendered as plain text or as a meth environment"
  },
  "api/TikzAutonoma.ITikzWritable.html": {
    "href": "api/TikzAutonoma.ITikzWritable.html",
    "title": "Interface ITikzWritable | TikzAutonoma",
    "keywords": "Interface ITikzWritable Interface for objects compilable for Tikz Namespace : TikzAutonoma Assembly : TikzAutonoma.dll Syntax public interface ITikzWritable Methods | Improve this Doc View Source Compile(ITikzWriter) Compiles the object to a Tikz format Declaration string Compile(ITikzWriter writer) Parameters Type Name Description ITikzWriter writer The writer used to compile this object Returns Type Description System.String Returns the current object as a string in Tikz format"
  },
  "api/TikzAutonoma.ITikzWriter.html": {
    "href": "api/TikzAutonoma.ITikzWriter.html",
    "title": "Interface ITikzWriter | TikzAutonoma",
    "keywords": "Interface ITikzWriter Interface for object able to compile ITikzWritable objects Namespace : TikzAutonoma Assembly : TikzAutonoma.dll Syntax public interface ITikzWriter Methods | Improve this Doc View Source CompileEdge(ITikzEdge) Compiles a edge to Tikz format Declaration string CompileEdge(ITikzEdge edge) Parameters Type Name Description ITikzEdge edge The edge to compile Returns Type Description System.String Returns the current edge as a string in Tikz format | Improve this Doc View Source CompileNode(ITikzNode) Compiles a node to Tikz format Declaration string CompileNode(ITikzNode node) Parameters Type Name Description ITikzNode node The node to compile Returns Type Description System.String Returns the current node as a string in Tikz format | Improve this Doc View Source FormatEdgeAssociation(EdgeAssociation) Compiles edge definitions in an associative format for Tikz figures Declaration string FormatEdgeAssociation(EdgeAssociation edgeAssociation) Parameters Type Name Description EdgeAssociation edgeAssociation The association between two nodes Returns Type Description System.String Returns the current edge association in Tikz format | Improve this Doc View Source FormatNodeAssociation(NodeAssociation) Compiles node definitions in an associative format for Tikz figures Declaration string FormatNodeAssociation(NodeAssociation nodeAssociation) Parameters Type Name Description NodeAssociation nodeAssociation The association between two nodes Returns Type Description System.String Returns the current node association in Tikz format"
  },
  "api/TikzAutonoma.TextMode.html": {
    "href": "api/TikzAutonoma.TextMode.html",
    "title": "Enum TextMode | TikzAutonoma",
    "keywords": "Enum TextMode Enum to indicate whether labels should be rendered as plain text or as a meth environment Namespace : TikzAutonoma Assembly : TikzAutonoma.dll Syntax public enum TextMode Fields Name Description MathText Indicates a math environment PlainText Indicates plain text"
  },
  "api/TikzAutonoma.TikzObjects.html": {
    "href": "api/TikzAutonoma.TikzObjects.html",
    "title": "Namespace TikzAutonoma.TikzObjects | TikzAutonoma",
    "keywords": "Namespace TikzAutonoma.TikzObjects Classes TikzEdge An edge object for a Tikz figure TikzFigure The object encapsulating a TikzFigure TikzNode A node object for a Tikz figure TikzObject Base class used for all Tikz objects Interfaces ITikzEdge Interface encapsulating the Tikz Edge objects ITikzNode Interface encapsulating the Tikz Node objects ITikzObject Interface encapsulating Tikz objects"
  },
  "api/TikzAutonoma.TikzObjects.ITikzEdge.html": {
    "href": "api/TikzAutonoma.TikzObjects.ITikzEdge.html",
    "title": "Interface ITikzEdge | TikzAutonoma",
    "keywords": "Interface ITikzEdge Interface encapsulating the Tikz Edge objects Inherited Members ITikzObject.Name ITikzObject.Label ITikzObject.TextMode ITikzObject.XShift ITikzObject.YShift ITikzWritable.Compile(ITikzWriter) Namespace : TikzAutonoma.TikzObjects Assembly : TikzAutonoma.dll Syntax public interface ITikzEdge : ITikzObject, ITikzWritable Properties | Improve this Doc View Source TextDirection Declaration Direction TextDirection { get; set; } Property Value Type Description Direction"
  },
  "api/TikzAutonoma.TikzObjects.ITikzNode.html": {
    "href": "api/TikzAutonoma.TikzObjects.ITikzNode.html",
    "title": "Interface ITikzNode | TikzAutonoma",
    "keywords": "Interface ITikzNode Interface encapsulating the Tikz Node objects Inherited Members ITikzObject.Name ITikzObject.Label ITikzObject.TextMode ITikzObject.XShift ITikzObject.YShift ITikzWritable.Compile(ITikzWriter) Namespace : TikzAutonoma.TikzObjects Assembly : TikzAutonoma.dll Syntax public interface ITikzNode : ITikzObject, ITikzWritable Properties | Improve this Doc View Source IsInitialNode Declaration bool IsInitialNode { get; set; } Property Value Type Description System.Boolean"
  },
  "api/TikzAutonoma.TikzObjects.ITikzObject.html": {
    "href": "api/TikzAutonoma.TikzObjects.ITikzObject.html",
    "title": "Interface ITikzObject | TikzAutonoma",
    "keywords": "Interface ITikzObject Interface encapsulating Tikz objects Namespace : TikzAutonoma.TikzObjects Assembly : TikzAutonoma.dll Syntax public interface ITikzObject Properties | Improve this Doc View Source Label The text present shown within this object Declaration string Label { get; set; } Property Value Type Description System.String | Improve this Doc View Source Name The name used to reference this node in the Tikz figure Declaration string Name { get; set; } Property Value Type Description System.String | Improve this Doc View Source TextMode Indicates whether or not to enclose the compiled label in $ $ Declaration TextMode TextMode { get; set; } Property Value Type Description TextMode | Improve this Doc View Source XShift Shift the label text along the x-axis Declaration double XShift { get; set; } Property Value Type Description System.Double | Improve this Doc View Source YShift Shift the label text along the y-axis Declaration double YShift { get; set; } Property Value Type Description System.Double"
  },
  "api/TikzAutonoma.TikzObjects.TikzEdge.html": {
    "href": "api/TikzAutonoma.TikzObjects.TikzEdge.html",
    "title": "Class TikzEdge | TikzAutonoma",
    "keywords": "Class TikzEdge An edge object for a Tikz figure Inheritance System.Object TikzObject TikzEdge Implements ITikzEdge ITikzObject ITikzWritable Inherited Members TikzObject.Label TikzObject.Name TikzObject.TextMode TikzObject.XShift TikzObject.YShift System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : TikzAutonoma.TikzObjects Assembly : TikzAutonoma.dll Syntax public class TikzEdge : TikzObject, ITikzEdge, ITikzObject, ITikzWritable Constructors | Improve this Doc View Source TikzEdge(String, TextMode, Direction, Double, Double) Constructs a new Edge Declaration public TikzEdge(string label, TextMode textMode = TextMode.MathText, Direction textDirection = Direction.Above, double xShift = 0, double yShift = 0) Parameters Type Name Description System.String label The text shown along the edge TextMode textMode Indicates whether or not to enclose the compiled label in $ $ Direction textDirection The location of the text relative to direction of the edge System.Double xShift Shift the label text along the x-axis System.Double yShift Shift the label text along the y-axis Properties | Improve this Doc View Source TextDirection The location of the text relative to direction of the edge Declaration public Direction TextDirection { get; set; } Property Value Type Description Direction Methods | Improve this Doc View Source Compile(ITikzWriter) Compiles the edge to a Tikz format Declaration public override string Compile(ITikzWriter writer) Parameters Type Name Description ITikzWriter writer The writer used to compile this object Returns Type Description System.String Returns the current edge as a string in Tikz format Overrides TikzObject.Compile(ITikzWriter) Implements ITikzEdge ITikzObject ITikzWritable"
  },
  "api/TikzAutonoma.TikzObjects.TikzFigure.html": {
    "href": "api/TikzAutonoma.TikzObjects.TikzFigure.html",
    "title": "Class TikzFigure | TikzAutonoma",
    "keywords": "Class TikzFigure The object encapsulating a TikzFigure Inheritance System.Object TikzFigure Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : TikzAutonoma.TikzObjects Assembly : TikzAutonoma.dll Syntax public class TikzFigure Constructors | Improve this Doc View Source TikzFigure(String, String, ITikzNode) Constructs a new Tikz figure Declaration public TikzFigure(string caption, string label, ITikzNode rootNode) Parameters Type Name Description System.String caption LaTeX figure caption text System.String label LaTeX figure label/name ITikzNode rootNode The initial node used in the figure Properties | Improve this Doc View Source Caption LaTeX figure caption text Declaration public string Caption { get; set; } Property Value Type Description System.String | Improve this Doc View Source Label LaTeX figure label/name Declaration public string Label { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source AddEdge(ITikzEdge, ITikzNode, ITikzNode) Adds a new edge associated with a source and target node Declaration public void AddEdge(ITikzEdge edge, ITikzNode source, ITikzNode target) Parameters Type Name Description ITikzEdge edge The edge object ITikzNode source The source node ITikzNode target The target node | Improve this Doc View Source AddNode(ITikzNode, ITikzNode, Direction) Adds a new node association with another node Declaration public void AddNode(ITikzNode source, ITikzNode target, Direction direction) Parameters Type Name Description ITikzNode source The source node ITikzNode target The target node Direction direction The direction of target relative to source | Improve this Doc View Source Build() Compiles the figure to a Tikz format Declaration public string Build() Returns Type Description System.String Returns the current figure as a string in Tikz format"
  },
  "api/TikzAutonoma.TikzObjects.TikzNode.html": {
    "href": "api/TikzAutonoma.TikzObjects.TikzNode.html",
    "title": "Class TikzNode | TikzAutonoma",
    "keywords": "Class TikzNode A node object for a Tikz figure Inheritance System.Object TikzObject TikzNode Implements ITikzNode ITikzObject ITikzWritable Inherited Members TikzObject.Label TikzObject.Name TikzObject.TextMode TikzObject.XShift TikzObject.YShift System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : TikzAutonoma.TikzObjects Assembly : TikzAutonoma.dll Syntax public class TikzNode : TikzObject, ITikzNode, ITikzObject, ITikzWritable Constructors | Improve this Doc View Source TikzNode(String, String, TextMode, Double, Double, Boolean) Constructs a new node Declaration public TikzNode(string name, string label, TextMode textMode = TextMode.MathText, double xShift = 0, double yShift = 0, bool isInitialNode = false) Parameters Type Name Description System.String name The name used to reference this node in the Tikz figure System.String label The text present shown within this node TextMode textMode Indicates whether or not to enclose the compiled label in $ $ System.Double xShift Shift the label text along the x-axis System.Double yShift Shift the label text along the y-axis System.Boolean isInitialNode Indicates that this node is an initial node in figure and adds an arrow to indicate the figure entry point Properties | Improve this Doc View Source IsInitialNode Indicates that this node is an initial node in figure and adds an arrow to indicate the figure entry point Declaration public bool IsInitialNode { get; set; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Compile(ITikzWriter) Compiles the node to a Tikz format Declaration public override string Compile(ITikzWriter writer) Parameters Type Name Description ITikzWriter writer The writer used to compile this object Returns Type Description System.String Returns the current node as a string in Tikz format Overrides TikzObject.Compile(ITikzWriter) Implements ITikzNode ITikzObject ITikzWritable"
  },
  "api/TikzAutonoma.TikzObjects.TikzObject.html": {
    "href": "api/TikzAutonoma.TikzObjects.TikzObject.html",
    "title": "Class TikzObject | TikzAutonoma",
    "keywords": "Class TikzObject Base class used for all Tikz objects Inheritance System.Object TikzObject TikzEdge TikzNode Implements ITikzWritable ITikzObject Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : TikzAutonoma.TikzObjects Assembly : TikzAutonoma.dll Syntax public abstract class TikzObject : ITikzWritable, ITikzObject Constructors | Improve this Doc View Source TikzObject(String, String, TextMode, Double, Double) Base constructor used for making new Tikz objects Declaration protected TikzObject(string name, string label, TextMode textMode, double xShift, double yShift) Parameters Type Name Description System.String name The name used to reference this node in the Tikz figure System.String label The text present shown within this object TextMode textMode Indicates whether or not to enclose the compiled label in $ $ System.Double xShift Shift the label text along the x-axis System.Double yShift Shift the label text along the y-axis Properties | Improve this Doc View Source Label The text present shown within this object Declaration public string Label { get; set; } Property Value Type Description System.String | Improve this Doc View Source Name The name used to reference this node in the Tikz figure Declaration public string Name { get; set; } Property Value Type Description System.String | Improve this Doc View Source TextMode Indicates whether or not to enclose the compiled label in $ $ Declaration public TextMode TextMode { get; set; } Property Value Type Description TextMode | Improve this Doc View Source XShift Shift the label text along the x-axis Declaration public double XShift { get; set; } Property Value Type Description System.Double | Improve this Doc View Source YShift Shift the label text along the y-axis Declaration public double YShift { get; set; } Property Value Type Description System.Double Methods | Improve this Doc View Source Compile(ITikzWriter) Compiles the object to a Tikz format Declaration public abstract string Compile(ITikzWriter writer) Parameters Type Name Description ITikzWriter writer The writer used to compile this object Returns Type Description System.String Returns the current node as a string in Tikz format Implements ITikzWritable ITikzObject"
  },
  "api/TikzAutonoma.TikzWriter.html": {
    "href": "api/TikzAutonoma.TikzWriter.html",
    "title": "Class TikzWriter | TikzAutonoma",
    "keywords": "Class TikzWriter Writer object used to compile objects to Tikz format Inheritance System.Object TikzWriter Implements ITikzWriter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : TikzAutonoma Assembly : TikzAutonoma.dll Syntax public class TikzWriter : ITikzWriter Methods | Improve this Doc View Source CompileEdge(ITikzEdge) Compiles a edge to Tikz format Declaration public string CompileEdge(ITikzEdge edge) Parameters Type Name Description ITikzEdge edge The edge to compile Returns Type Description System.String Returns the current edge as a string in Tikz format | Improve this Doc View Source CompileNode(ITikzNode) Compiles a node to Tikz format Declaration public string CompileNode(ITikzNode node) Parameters Type Name Description ITikzNode node The node to compile Returns Type Description System.String Returns the current node as a string in Tikz format | Improve this Doc View Source FormatEdgeAssociation(EdgeAssociation) Compiles edge definitions in an associative format for Tikz figures Declaration public string FormatEdgeAssociation(EdgeAssociation edgeAssociation) Parameters Type Name Description EdgeAssociation edgeAssociation The association between two nodes Returns Type Description System.String Returns the current edge association in Tikz format | Improve this Doc View Source FormatNodeAssociation(NodeAssociation) Compiles node definitions in an associative format for Tikz figures Declaration public string FormatNodeAssociation(NodeAssociation nodeAssociation) Parameters Type Name Description NodeAssociation nodeAssociation The association between two nodes Returns Type Description System.String Returns the current node association in Tikz format Implements ITikzWriter"
  },
  "guides/intro.html": {
    "href": "guides/intro.html",
    "title": "Introduction | TikzAutonoma",
    "keywords": "Introduction Building a simple figure In this tutorial, we will aim to build a very small and simple neural network-like figure. Observe the final result: There are three objects we will use to construct the above image: Node , Edge , and Figure . Nodes The TikzNode object allows us to encapsulate our node data and reuse it with ease. We need to make four nodes, each with their own names and labels. The name corresponds to the property PGF uses to render the Tikz figure. The label is the contents of the node. We can compare the C# object and LaTeX code with this example: C#: var myNode = new TikzNode(\"nodeName\", \"node label\"); LaTeX: \\node[state] (nodeName) {$node label$}; We can, of course, remove the $ from the node label, rendering it as plain text rather than a math environment with an extra parameter in our node constructor: var myNode = new TikzNode(\"nodeName\", \"node label\", textMode: TextMode.PlainText); Here, the textMode optional parameter TextMode . We can now begin building our diagram. We will name each node based on their job role in the figure. The left-most input layer, from top to bottom, will be the bias, input 1, and input 2. We will simply call there inputNodeB , inputNodeX1 , and inputNodeX2 : var inputNodeB = new TikzNode(\"b\", \"1\"); var inputNodeX1 = new TikzNode(\"x1\", \"1.1\"); var inputNodeX2 = new TikzNode(\"x2\", \"0.5\"); The second layer has a node representing a node with an \"activation function\". In LaTeX, we can write this fancy L with \\mathcal{L} . The third layer, the output layer, also has a node with a label with an accent. This \"hat\" is given with: \\hat{y} . Note that both of these nodes require the math environment, so we will not use plaintext here: var NodeL = new TikzNode(\"L\", @\"\\mathcal{L}\"); var NodeY = new TikzNode(\"y\", @\"\\hat{y}\"); That is all for the nodes of this figure. Simple! Edges The TikzEdge object is also very simple. Unlike nodes, edges have no name. There are still arguments we can give, however, which will affect the way our figure will be styled. Namely, the xshift , yshift , and textDirection arguments. For edges, these arguments shift the location of the text label! var edgeBL = new TikzEdge(\"1.05\", yShift: 3); var edgeX1L = new TikzEdge(\"-0.15\"); var edgeX2L = new TikzEdge(\"0.8\", textDirection: Direction.Below, yShift: -3); var edgeLY = new TikzEdge(\"0.984\"); Note Currently, there is no implementation for loops from a node to itself. Nor is there edge bending. These are planned features. In the example we are working on, the subtle style changes such as the shifting can easily be ignored and added into the final LaTeX generated code. However, for larger figures, where you may be constantly re-generating figures, it may be helpful to spent a little more time to just add the properties as you go. We are now half way there! All that is left is to add these objects to a figure and then build! Figure Currently, you must provide a caption and a figure name for the TikzFigure . var figure = new TikzFigure(\"A simple neural network\", \"simple_nn\", inputNodeB); Our final step is to hook up each edge to a source node and a target node: figure.AddNode(inputNodeX1, inputNodeB, Direction.Below); figure.AddNode(inputNodeX2, inputNodeX1, Direction.Below); figure.AddNode(NodeL, inputNodeX1, Direction.Right); figure.AddNode(NodeY, NodeL, Direction.Right); figure.AddEdge(edgeBL, inputNodeB, NodeL); figure.AddEdge(edgeX1L, inputNodeX1, NodeL); figure.AddEdge(edgeX2L, inputNodeX2, NodeL); figure.AddEdge(edgeLY, NodeL, NodeY); That is it! We can now generate our figure: var tikz = figure.Build(); Console.WriteLine(tikz); The outputted result is given: \\begin{figure} \\centering \\begin{tikzpicture} \\node[state] (b) {$1$}; \\node[state, below of=b] (x1) {$1.1$}; \\node[state, below of=x1] (x2) {$0.5$}; \\node[state, right of=x1] (L) {$\\mathcal{L}$}; \\node[state, right of=L] (y) {$\\hat{y}$}; \\draw (b) edge[above] node[yshift=3mm] {$1.05$} (L) (x1) edge[above] node[] {$-0.15$} (L) (x2) edge[below] node[yshift=-3mm] {$0.8$} (L) (L) edge[above] node[] {$0.984$} (y) ; \\end{tikzpicture} \\caption{A simple neural network} \\label{fig:simple_nn} \\end{figure}"
  },
  "index.html": {
    "href": "index.html",
    "title": "Tikz Automata | TikzAutonoma",
    "keywords": "Tikz Automata TikzAutomata is a C# library designed to assist in building Tikz figures. Large figures can become complex and prone to errors and typos, which may cause long delays in the development cycle of other work. Building your figures using this C# library provides you the ability to build using objects and prevent the issue of figure-breaking typos. Note TikzAutonoma is currently still in very early development. Please note that there is minimal functionality beyond basic plots, and currently still causes some occasional issues on figure generation. What is Tikz? \\usepackage{tikz} \\usetikzlibrary{automata, positioning, arrows} \\tikzset{% ->, >=stealth', node distance=2cm, .every state/.style={thick, fill=gray!10}, initial text=$ $, } \\begin{figure} \\centering \\begin{tikzpicture} \\node[state] (b) {$1$}; \\node[state, below of=b] (x1) {$1.1$}; \\node[state, below of=x1] (x2) {$0.5$}; \\node[state, right of=x1] (L) {$\\mathcal{L}$}; \\node[state, right of=L] (y) {$\\hat{y}$}; \\draw (b) edge[above] node[yshift=3mm] {$1.05$} (L) (x1) edge[above] node[] {$-0.15$} (L) (x2) edge[below] node[yshift=-3mm] {$0.8$} (L) (L) edge[above] node[] {$0.984$} (y) ; \\end{tikzpicture} \\caption{A simple neural network} \\label{fig:simple_nn} \\end{figure} var inputNodeB = new TikzNode(\"b\", \"1\"); var inputNodeX1 = new TikzNode(\"x1\", \"1.1\"); var inputNodeX2 = new TikzNode(\"x2\", \"0.5\"); var nodeL = new TikzNode(\"L\", @\"\\mathcal{L}\"); var nodeL = new TikzNode(\"y\", @\"\\hat{y}\"); var edgeBL = new TikzEdge(\"1.05\", yShift: 3); var edgeX1L = new TikzEdge(\"-0.15\"); var edgeX2L = new TikzEdge(\"0.8\", textDirection: Direction.Below, yShift: -3); var edgeLY = new TikzEdge(\"0.984\"); var figure = new TikzFigure(\"A simple neural network\", \"simple_nn\", inputNodeB); figure.AddNode(inputNodeX1, inputNodeB, Direction.Below); figure.AddNode(inputNodeX2, inputNodeX1, Direction.Below); figure.AddNode(nodeL, inputNodeX1, Direction.Right); figure.AddNode(nodeL, nodeL, Direction.Right); figure.AddEdge(edgeBL, inputNodeB, nodeL); figure.AddEdge(edgeX1L, inputNodeX1, nodeL); figure.AddEdge(edgeX2L, inputNodeX2, nodeL); figure.AddEdge(edgeLY, nodeL, nodeL); var tikz = figure.Build(); Console.WriteLine(tikz);"
  }
}